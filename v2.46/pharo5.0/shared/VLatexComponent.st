'From Pharo5.0 of 16 April 2015 [Latest update: #50760] on 24 August 2016 at 3:33:08.093284 pm'!VLatexElement subclass: #VLatexComponent	instanceVariableNames: 'portsC childC isRoot deepC widthC topC full'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Tools-View'!!VLatexComponent commentStamp: 'jimmy 8/24/2016 11:20' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design: For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	childC:		<Object>	deepC:		<Object>	full:		<Object>	isRoot:		<Object>	portsC:		<Object>	topC:		<Object>	widthC:		<Object>    Implementation Points!!VLatexComponent methodsFor: 'accessing' stamp: 'jimmy 7/12/2016 14:09'!isRoot	^ isRoot.! !!VLatexComponent methodsFor: 'accessing' stamp: 'jimmy 7/12/2016 12:07'!internallyRequiredPorts	| result |		result := OrderedCollection new.		portsC do: [ :p |			p isInternalPort ifTrue: [ p isProvidedPort ifFalse: [ result add: p ] ]		 ].		^ result.! !!VLatexComponent methodsFor: 'accessing' stamp: 'jimmy 7/11/2016 14:59'!portsComponent	^portsC! !!VLatexComponent methodsFor: 'accessing' stamp: 'jimmy 7/20/2016 15:33'!addChild: anVLatexComponent	| cont | 	cont := true.		childC do: [ :c | 		(c compoElement = anVLatexComponent compoElement) ifTrue: [ cont := false. ]		].		cont ifTrue: [ childC add: anVLatexComponent].	! !!VLatexComponent methodsFor: 'accessing' stamp: 'jimmy 7/11/2016 14:59'!childComponent: anObject	childC := anObject.! !!VLatexComponent methodsFor: 'accessing' stamp: 'jimmy 7/20/2016 17:13'!full: anBoolean	full := anBoolean.! !!VLatexComponent methodsFor: 'accessing' stamp: 'jimmy 7/12/2016 12:11'!externallyProvidedPorts	| result |		result := OrderedCollection new.		portsC do: [ :p |			p isInternalPort ifFalse: [ p isProvidedPort ifTrue: [ result add: p ] ]		 ].		^ result.! !!VLatexComponent methodsFor: 'accessing' stamp: 'jimmy 7/11/2016 15:00'!portsComponent: anObject	portsC := anObject! !!VLatexComponent methodsFor: 'accessing' stamp: 'jimmy 7/12/2016 14:10'!isRoot: anBoolean	isRoot := anBoolean.! !!VLatexComponent methodsFor: 'accessing' stamp: 'jimmy 7/11/2016 14:58'!childComponent	^ childC! !!VLatexComponent methodsFor: 'accessing' stamp: 'jimmy 7/12/2016 17:53'!topComponent	^topC.! !!VLatexComponent methodsFor: 'accessing' stamp: 'jimmy 7/20/2016 16:43'!internallyPorts	| result |		result := OrderedCollection new.		portsC do: [ :p |			p isInternalPort ifTrue: [ result add: p  ]		 ].		^ result.! !!VLatexComponent methodsFor: 'accessing' stamp: 'jimmy 7/12/2016 12:12'!externallyRequiredPorts	| result |		result := OrderedCollection new.		portsC do: [ :p |			p isInternalPort ifFalse: [ p isProvidedPort ifFalse: [ result add: p ] ]		 ].		^ result.! !!VLatexComponent methodsFor: 'accessing' stamp: 'jimmy 7/12/2016 12:11'!internallyProvidedPorts	| result |		result := OrderedCollection new.		portsC do: [ :p |			p isInternalPort ifTrue: [ p isProvidedPort ifTrue: [ result add: p ] ]		 ].		^ result.! !!VLatexComponent methodsFor: 'accessing' stamp: 'jimmy 7/12/2016 17:53'!topComponent: anFloat	topC := anFloat.! !!VLatexComponent methodsFor: 'accessing' stamp: 'jimmy 7/20/2016 16:44'!externallyPorts	| result |		result := OrderedCollection new.		portsC do: [ :p |			p isInternalPort ifFalse: [ result add: p ]		 ].		^ result.! !!VLatexComponent methodsFor: 'accessing' stamp: 'jimmy 7/20/2016 17:11'!full	^full.! !!VLatexComponent methodsFor: 'as yet unclassified' stamp: 'jimmy 7/20/2016 15:10'!collectPort2: ports	self isRoot ifTrue: [portsC ifNotNil: [ ports addAll: portsC].		childC do: [ :c |		ports addAll: (c externallyProvidedPorts ).		ports addAll: (c externallyRequiredPorts ).	 ].	]	ifFalse: [ 		ports addAll: (self externallyProvidedPorts ).		ports addAll: (self externallyRequiredPorts ).	 ].! !!VLatexComponent methodsFor: 'public' stamp: 'jimmy 7/18/2016 17:28'!sizeRight	^ ((self internallyProvidedPorts size) + (self externallyRequiredPorts size)) * 1.! !!VLatexComponent methodsFor: 'public' stamp: 'jimmy 7/18/2016 17:29'!sizeRightExterne	^ (self externallyRequiredPorts size) * 1.! !!VLatexComponent methodsFor: 'public' stamp: 'jimmy 7/19/2016 13:24'!collectPort: ports	portsC ifNotNil: [ ports addAll: portsC].		childC do: [ :c |		c collectPort: ports.	 ].! !!VLatexComponent methodsFor: 'public' stamp: 'jimmy 7/11/2016 15:18'!initOwnerPort	portsC do: [ :p | p ownerElement: self ].! !!VLatexComponent methodsFor: 'public' stamp: 'jimmy 8/1/2016 13:00'!positionChild: anVLatexComponent	| index |		index := 0.		childC do: [ :c |		c = anVLatexComponent ifTrue: [ ^index. ].		index := index + 1.	].	^index. ! !!VLatexComponent methodsFor: 'public' stamp: 'jimmy 7/11/2016 15:12'!addPort: Vport	portsC add: Vport.! !!VLatexComponent methodsFor: 'public' stamp: 'jimmy 7/12/2016 17:27'!haveInternePort	self internallyRequiredPorts isEmpty ifFalse: [ ^ true. ].	self internallyProvidedPorts isEmpty ifFalse: [ ^ true. ].	^ false.! !!VLatexComponent methodsFor: 'public' stamp: 'jimmy 7/12/2016 16:17'!deepComponent	^ deepC.! !!VLatexComponent methodsFor: 'public' stamp: 'jimmy 7/18/2016 17:28'!sizeLeft 	^ ((self internallyRequiredPorts size) + (self externallyProvidedPorts size)) * 1.! !!VLatexComponent methodsFor: 'public' stamp: 'jimmy 7/18/2016 17:29'!sizeLeftExterne	^ (self externallyProvidedPorts size) * 1.! !!VLatexComponent methodsFor: 'public' stamp: 'jimmy 7/12/2016 17:16'!deepComponent: anFloat	deepC := anFloat.! !!VLatexComponent methodsFor: 'initialization' stamp: 'jimmy 7/12/2016 17:16'!widthComponent: anFloat	widthC := anFloat! !!VLatexComponent methodsFor: 'initialization' stamp: 'jimmy 7/20/2016 17:11'!initialize	super initialize.		childC := OrderedCollection new.	portsC := OrderedCollection new.	isRoot := false.	deepC := 0.	widthC := 0.	topC := 0.	full := false.! !!VLatexComponent methodsFor: 'initialization' stamp: 'jimmy 7/12/2016 17:16'!widthComponent	^widthC! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!VLatexComponent class	instanceVariableNames: ''!!VLatexComponent class methodsFor: 'public' stamp: 'jimmy 8/24/2016 10:10'!new: anComponent	| s |		s := super new: anComponent.			anComponent class == Component 		ifTrue: [ 			(self filterPortsForComponentCompoent: (anComponent primitive_getPorts))	 			do: [ :p | s addPort: (VPort new: p owner: s) ].				^s.		].	anComponent == Descriptor 		ifTrue: [ self createComponentDescriptor: s. ^s.].		(anComponent isKindOf: PortDescription)		ifTrue: [ 			(self filterPortsForComponentOther: (anComponent primitive_getPorts))	 			do: [ :p | s addPort: (VPort new: p owner: s) ]. ^s].				(anComponent isKindOf: Port) 		ifTrue: [  			(self filterPortsForComponentPort: (anComponent primitive_getPorts))	 			do: [ :p | s addPort: (VPort new: p owner: s) ]. ^s ].		(self filterPorts: (anComponent primitive_getPorts))	 	do: [ :p | s addPort: (VPort new: p owner: s) ].	^s.! !!VLatexComponent class methodsFor: 'private' stamp: 'jimmy 8/23/2016 09:47'!filterPortsForComponentOther: anPortDictionary	| dictionary |	dictionary := Dictionary new. 	dictionary addAll: anPortDictionary.	#(#args #self #super #connectedPorts #delegatePorts)		do: [:f | (anPortDictionary includesKey: f)				ifTrue: [dictionary removeKey: f]].	^dictionary.! !!VLatexComponent class methodsFor: 'private' stamp: 'jimmy 7/12/2016 11:52'!isFather: fatherAnComponent child: childAnComponent		^ fatherAnComponent == (childAnComponent instVarNamed: #owner).	! !!VLatexComponent class methodsFor: 'private' stamp: 'jimmy 8/23/2016 11:30'!filterPorts: anPortDictionary	| dictionary |	dictionary := Dictionary new. 	dictionary addAll: anPortDictionary.	#(#args #self #super #connectedPorts #delegatedPorts #interface )		do: [:f | (anPortDictionary includesKey: f)				ifTrue: [dictionary removeKey: f]].	^dictionary.! !!VLatexComponent class methodsFor: 'private' stamp: 'jimmy 8/23/2016 11:30'!filterPortsForComponentCompoent: anPortDictionary	| dictionary |	dictionary := Dictionary new. 	dictionary addAll: anPortDictionary.	#(#connectedPorts #delegatedPorts #interface )		do: [:f | (anPortDictionary includesKey: f)				ifTrue: [dictionary removeKey: f]].	^dictionary.! !!VLatexComponent class methodsFor: 'private' stamp: 'jimmy 8/24/2016 09:57'!createComponentDescriptor: s		s nameElement: 'Descriptor'. 		s addPort: (VPort fake: #default interface: '*' internal: false  provided: true  owner: s ).  	s addPort: (VPort fake: #name interface: 'Symbol' internal: true  provided: false  owner: s ). 	s addPort: (VPort fake: ('ports[ ]' asSymbol)  interface: 'PortDescription' internal: true  provided: false  owner: s ). 	s addPort: (VPort fake: ('architecture[ ]' asSymbol) interface: 'ConnectionDescription' internal: true  provided: false  owner: s ). 	s addPort: (VPort fake: ('service[ ]' asSymbol)  interface: 'Service' internal: true  provided: false  owner: s ).! !!VLatexComponent class methodsFor: 'private' stamp: 'jimmy 8/23/2016 11:31'!filterPortsForComponentPort: anPortDictionary	| dictionary |	dictionary := Dictionary new. 	dictionary addAll: anPortDictionary.	#(#args #self #super)		do: [:f | (anPortDictionary includesKey: f)				ifTrue: [dictionary removeKey: f]].	^dictionary.! !
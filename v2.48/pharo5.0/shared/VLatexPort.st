'From Pharo5.0 of 16 April 2015 [Latest update: #50760] on 24 August 2016 at 3:37:39.13614 pm'!VLatexElement subclass: #VLatexPort	instanceVariableNames: 'isInternalP isProvidedP isConnectedP componentConnected interfaceP connection connectionIn isDelegated'	classVariableNames: ''	poolDictionaries: ''	category: 'Compo-Tools-View'!!VLatexPort commentStamp: 'jimmy 8/24/2016 11:20' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design: For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	componentConnected:		<Object>	connection:		<Object>	connectionIn:		<Object>	interfaceP:		<Object>	isConnectedP:		<Object>	isDelegated:		<Object>	isInternalP:		<Object>	isProvidedP:		<Object>    Implementation Points!!VLatexPort methodsFor: 'accessing' stamp: 'jimmy 7/11/2016 15:23'!isProvidedPort: asBoolean	isProvidedP := asBoolean.! !!VLatexPort methodsFor: 'accessing' stamp: 'jimmy 7/18/2016 11:30'!interfacePort	^interfaceP! !!VLatexPort methodsFor: 'accessing' stamp: 'jimmy 7/11/2016 15:23'!isInternalPort: asBoolean	isInternalP := asBoolean! !!VLatexPort methodsFor: 'accessing' stamp: 'jimmy 7/11/2016 15:23'!isConnectedPort: asBoolean	isConnectedP := asBoolean! !!VLatexPort methodsFor: 'accessing' stamp: 'jimmy 7/11/2016 12:17'!isInternalPort	^ isInternalP! !!VLatexPort methodsFor: 'accessing' stamp: 'jimmy 7/21/2016 15:56'!isDelegated: p2 origin: p	((p isKindOf: SRequiredPort) and: (p2 isKindOf: SRequiredPort))	ifTrue: [ isDelegated := true].			((p isKindOf: SProvidedPort) and: (p2 isKindOf: SProvidedPort))	ifTrue: [ isDelegated := true].		^ isDelegated.! !!VLatexPort methodsFor: 'accessing' stamp: 'jimmy 7/11/2016 12:17'!isProvidedPort	^ isProvidedP! !!VLatexPort methodsFor: 'accessing' stamp: 'jimmy 7/18/2016 11:30'!interfacePort: interface	interfaceP := interface! !!VLatexPort methodsFor: 'accessing' stamp: 'jimmy 7/21/2016 15:17'!isDelegated	^isDelegated ! !!VLatexPort methodsFor: 'accessing' stamp: 'jimmy 7/11/2016 12:09'!componentConnected	^ componentConnected! !!VLatexPort methodsFor: 'accessing' stamp: 'jimmy 7/11/2016 12:17'!isConnectedPort	^ isConnectedP! !!VLatexPort methodsFor: 'accessing' stamp: 'jimmy 7/19/2016 13:41'!connectionIn	^connectionIn.! !!VLatexPort methodsFor: 'accessing' stamp: 'jimmy 7/20/2016 12:25'!addConnectionIn: anVConnection	| cont | 	cont := true.	connectionIn do: [ :c |		c = anVConnection ifTrue: [ cont := false ] ].		cont ifTrue: [ 	connectionIn add: anVConnection. ].! !!VLatexPort methodsFor: 'accessing' stamp: 'jimmy 7/19/2016 11:57'!connection: anVConnection	connection := anVConnection.! !!VLatexPort methodsFor: 'accessing' stamp: 'jimmy 8/9/2016 09:32'!isDelegated: anBoolean	isDelegated := anBoolean.! !!VLatexPort methodsFor: 'accessing' stamp: 'jimmy 7/11/2016 15:24'!componentConnected: anComponent	componentConnected := anComponent.! !!VLatexPort methodsFor: 'accessing' stamp: 'jimmy 7/19/2016 11:57'!connection	^connection! !!VLatexPort methodsFor: 'initialization' stamp: 'jimmy 8/23/2016 11:26'!initialize	super initialize.	isInternalP := false.	isProvidedP := false.	isConnectedP := false.	componentConnected := nil.	connection := nil.	isDelegated := false.	connectionIn := OrderedCollection new.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!VLatexPort class	instanceVariableNames: ''!!VLatexPort class methodsFor: 'private' stamp: 'jimmy 8/24/2016 10:05'!isInterfaceComponent: interface	| cmpCompo |				cmpCompo := OrderedCollection new.	cmpCompo add: (Smalltalk classNamed: #Component).	cmpCompo addAll: ((Smalltalk classNamed: #Component) subclasses).		cmpCompo do: [: i | (interface asSymbol) = (i name) ifTrue: [^true]].	^ false.! !!VLatexPort class methodsFor: 'public' stamp: 'jimmy 8/22/2016 17:51'!fake: anName interface: anInterface internal: i provided: p owner: anVComponent	| s |	s := super new.	s ownerElement: anVComponent.	s compoElement: nil.	s nameElement: anName.	s isInternalPort: i.	s isProvidedPort: p.	s interfacePort: anInterface.	^s.! !!VLatexPort class methodsFor: 'public' stamp: 'jimmy 8/24/2016 10:02'!new: anPort owner: anVComponent	| s connectedP interface portConnected connection |		s := super new: anPort.	s ownerElement: anVComponent.	s nameElement: (anPort primitive_getPortName getConnectedPort owner asString).		(anPort isKindOf: CollectionPort ) ifTrue: [ s nameElement: (s nameElement, '[ ]')].	((anPort isKindOf: (Smalltalk at: #SuperPort)) or: (anPort isKindOf: (Smalltalk at: #SelfPort)) )		ifTrue: [ s isProvidedPort: false. s isInternalPort: true.]		ifFalse: [ s isProvidedPort: (anPort isKindOf: (Smalltalk at: #SProvidedPort)). 			s isInternalPort: ((anPort primitive_getPortVisibility getConnectedPort owner) == #internal).].		  	interface := anPort primitive_getPortInterface getConnectedPort owner.	interface isArray 		ifTrue: [ s interfacePort: '*' ]		ifFalse: [ 	(self isInterfaceComponent: interface )							ifTrue: [s interfacePort: (interface asString)]							ifFalse: [s interfacePort: '*']].		connectedP := anPort primitive_getPortConnectedPorts.	connectedP isConnected		ifFalse: [ s isConnectedPort: false. s componentConnected: nil.]		ifTrue: [ s isConnectedPort: true. 					portConnected := connectedP getConnectedPort.					 ( s isDelegated: portConnected origin: anPort)						ifTrue: [ "s componentConnected: (VLatexPort new: portConnected owner: nil)."															connection := (VConnection new: s source: anPort destination: portConnected).								connection isDelegation: true.								s connection: connection. ]						ifFalse: [ 								(portConnected isKindOf: LiteralAtomicPort ) 									ifTrue: [ s componentConnected: ( VLitteral new: portConnected). 									s interfacePort: (portConnected owner class asString).									anVComponent addChild: s componentConnected. 									s componentConnected ownerElement: anVComponent.									connection := (VConnection new: s source: anPort destination: portConnected).								s connection: connection.																	]									ifFalse: [ s componentConnected: (VComponent new: (portConnected primitive_getOwnerComponent)). 								(VComponent isFather: (anVComponent compoElement ) child: (s componentConnected compoElement))								ifTrue: [ 									anVComponent addChild: s componentConnected. 									s componentConnected ownerElement: anVComponent ].								connection := (VConnection new: s source: anPort destination: portConnected).								s connection: connection. ].															].				.			].	^s.! !